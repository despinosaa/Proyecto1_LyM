/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducciï¿½n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaciï¿½n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}

Hashtable<String, Integer> variablesYValores = new Hashtable<String, Integer>();
Hashtable<String, Integer> tablaFunciones = new Hashtable<String, Integer>();

PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| 	"\n"
}

TOKEN: /* Nombres de Comandos */
{

			<DEFVAR:  "defvar">
		| 	<IGUAL: "=">
		| 	<MOVE: "move">
		| 	<TURN: "turn">
		|   <FACE: "face">
		|   <PUT: "put">
		|   <PICK: "pick">
		|   <MOVE_DIR: "move-dir">
		|   <RUN_DIRS: "run-dirs">
		|   <MOVE_FACE: "move-face">
		|   <SKIP: "skip">
		/* A function call */
}

TOKEN: /* Nombres de Estructuras */
{

			<IF:  "if">
		| 	<LOOP: "loop">
		| 	<REPEAT: "repeat">
		| 	<DEFUN: "defun">
		
}

TOKEN: /* Nombres de condiciones */
{

			<FACING_P:  "facing-p">
		| 	<CAN_PUT_P: "can-put-p">
		| 	<CAN_PICK_P: "can-pick-p">
		| 	<CAN_MOVE_P: "can-move-p">
		| 	<NOT: "not">
		/* A function call */
		
}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:   "CHIPS"  >	
}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


TOKEN :
{
		<NOMBRE: ((<LETRAM>) | (<LETRAm>) ((<NUMERO>)*((<LETRAM>) | (<LETRAm>))* )*>
		|  	<LETRAM: ["A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"]  >
		|  	<LETRAm: ["a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"] >
}

TOKEN : /*Constantes */
{
		<CONSTANT_TURN: ":left"|":right"|":around">
		<CONSTANT_FACE: ":north"|":south"|":east"|":west">
		<CONSTANT_DIR: ":front"|":right"|":left"|":back" >
}
	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		String n;
		salida=new String();
		
	}
	
	{
		(

		   	"(" <DEFVAR> n=nombre() x=numero() ")" {variablesYValores.put(n,x);salida = "Variable "+ n + " declarada con valor " + String.valueOf(x);}  
		| 	"(" <IGUAL>  n=nombreVariable() x=numero() ")" {variablesYValores.put(n,x);salida = "Se reemplazó la variable "+ n + " con el valor " + String.valueOf(x);}
		| 	"(" <MOVE>  (x=numero()|n=nombreVariable()) ")" {world.moveForward(x);salida = "Command: Moveforward ";}  
		|   "(" <TURN> <CONSTANT_TURN> ")" { }			  			
		|   "(" <FACE> <CONSTANT_FACE> ")" { }	
	    |   "(" <PUT> objetoPoner() ")" {world.popBalloons(x); salida = "Comando:  Put";}
	    |   "(" <PICK> objetoRecoger() ")" {world.pickBalloons(x); salida = "Comando:  Pick";}
	    |   "(" <MOVE_DIR> (x=numero()|n=nombreVariable()) <CONSTANT_DIR> ")" {}
	    |   "(" <RUN_DIRS> "(" (<CONSTANT_DIR >)+ ")"  ")" {}
	    |   "(" <MOVE_FACE> (x=numero()|n=nombreVariable()) <CONSTANT_FACE> ")" {}
	    |   "(" <SKIP> ")" {}
		|   "(" x=funcion() ")" {nombrefuncion()}

		)

	

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}


	funcion():
	{
	  for (i=0;i<tablaFunciones.size();i++) {
			if (tablaFunciones[i] == undefined) {
		    	console.log('la clave',i,'no está presente');
			}
		 	else {
		    	console.log('la clave',i,'está presente');
		  	}
		}
	x=tablaFunciones.get(n)
	}
	{
	}

	boolean structure(StringBuffer sistema) :
	{	
		
		int x;
		String n;
		salida=new String();
		
	}
	
	{
		(

		   	"(" <IF> x=condition() y=bloque() z=bloque() ")" {}  
		| 	"(" <LOOP>   x=condition() bloque1() ")" {}
		| 	"(" <REPEAT>  (x=numero()|n=nombreVariable()) bloque1() ")" {}  
		|   "(" <DEFUN> n=nombreFuncion() "(" (<NOMBRE>)* ")" bloque1() ")" { }			  			
		) 

		
	}


	boolean bloque(StringBuffer sistema):
	{
		int x = null;
		String n = null;
		int num = 0;
		salida=new String();
	}
	{
	  (
	      "(" structure() ")" {}  
		| "(" command() ")" {}	  )+
	}
	

	boolean condition(StringBuffer sistema) :
	{	
		int x = null;
		String n = null;
		int num = 0;
		salida=new String();
	}

	{
		(
		   	"(" <FACING_P> <CONSTANT_FACE> ")"
		   	{
			facing_p();
		    }  
		| 	"(" <CAN_PUT_P>  (<T_BALLOONS>|<T_CHIPS>) (x=numero()|n=nombreVariable()) ")"
			{
			  can_put_p();
			 }
		| 	"(" <CAN_PICK_P>  (<T_BALLOONS>|<T_CHIPS>) (x=numero()|n=nombreVariable()) ")"
			{
			  can_pick_p();
			 }
		|   "(" <CAN_MOVE_P> <CONSTANT_FACE> ")"
			{
			  can_move_p();
			}  
		|   "(" <NOT> condition() ")" {}  
		|	"(" ")"
			{
		  }

		) 

	}

	boolean facing_p():
	{
		  resp=false;
		  if RobotWorld.getFacing()==token.image
	  	  {
			resp= true;
		  }
		  else
		  {
		    resp false;
		  }
		  return resp;
	}
	{}

	
	boolean can_put_p():
		{
		  resp=false
		  if x != null
		  {
		    num=x;
		  }
		  else if n != null
		  {
		    num=variablesYValores.get(n);
		  }
		  if num==0 || ("BALLOONS"==token.image && RobotWorld.getMyBalloons()<=(num) && RobotWorld.chipExists()==false) || ("CHIPS"==token.image && RobotWorldDec.freeSpacesForChips()>num && RobotWorld.getMyChips<=(num) && RobotWorld.chipExists()==false)
		  {
		    resp= true;
		  }
		  else
		  {
		  	resp= false;
		  }
		  return resp
		}
		{}
		
	boolean can_pick_p():
		{
		  resp=false;
		  if x != null
		  {
		    num=x;
		  }
		  else if n != null
		  {
		    num=variablesYValores.get(n);
		  }
		  if num==0 || ("BALLOONS"==token.image && RobotWorld.countBalloons()>=(num)) || ("CHIPS"==token.image && RobotWorld.chipsToPick()>num && RobotWorld.chipExists()==true)
		  {
		    resp= true;
		  }
		  else
		  {
		  	resp= false;
		  }
		  return resp;
		}
		{}
			  
	boolean can_move_p():
		{
		  p=RobotWorld.getPosition();
		  resp=true;
		  if token.image==":north"
		  {
		    if RobotWorld.isBlocked(p.x,p.y-1)
		    {
		      resp= false;
		    }
		  }
		  else if token.image==":south"
		  {
		    if RobotWorld.isBlocked(p.x,p.y+1)
		    {
		      resp= false;
		    }
		  }
		  else if token.image==":west"
		  {
		    if RobotWorld.isBlocked(p.x-1,p.y)
		    {
		      resp= false;
		    }
		  }
		  else if token.image==":east"
		  {
		    if RobotWorld.isBlocked(p.x+1,p.y)
		    {
		      resp= false;
		    }
		  }
		  return resp;
		}
		{}
		
	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */


	String nombre():
	{
	  String nombre="";
	}
	{
	  <NOMBRE>
	  {
	    return nombre;
	  }
	}


	String nombreVariable():
	{
		for (i=0;i<5;i++) {
			if (diccionario[i] === undefined) {
		    	console.log('la clave',i,'no está presente');
			}
		 	else {
		    	console.log('la clave',i,'está presente');
		  	}
		}
	}
	{
	  <NOMBRE>
	  {
	    return nombre;
	  }
	}
	
	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	