/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducciï¿½n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaciï¿½n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}

Hashtable<String, Integer> variablesYValores = new Hashtable<String, Integer>();
Map<String, Map<String, ?>> tablaFunciones = new Map<String, Map<String, ?>>();

PARSER_END(Robot)

SKIP:
{
		"\r"
	|	"\t"
	| 	"\n"
}

TOKEN: /* Nombres de Comandos */
{

			<DEFVAR:  "defvar ">
		| 	<IGUAL: "= ">
		| 	<MOVE: "move ">
		| 	<TURN: "turn ">
		|   <FACE: "face ">
		|   <PUT: "put ">
		|   <PICK: "pick ">
		|   <MOVE_DIR: "move-dir ">
		|   <RUN_DIRS: "run-dirs ">
		|   <MOVE_FACE: "move-face ">
		|   <SKIP: "skip ">

}

TOKEN: /* ESPACIO */
{
	<ESPACIO:  " ">
}



TOKEN: /* Nombres de Estructuras */
{

			<IF:  "if ">
		| 	<LOOP: "loop ">
		| 	<REPEAT: "repeat ">
		| 	<DEFUN: "defun ">
		
}

TOKEN: /* Nombres de condiciones */
{

			<FACING_P:  "facing-p ">
		| 	<CAN_PUT_P: "can-put-p ">
		| 	<CAN_PICK_P: "can-pick-p ">
		| 	<CAN_MOVE_P: "can-move-p ">
		| 	<NOT: "not ">


		
}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS " >
		|	<T_CHIPS:   "CHIPS "  >	
}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


TOKEN :
{
		<NOMBRE: ((<LETRAM>) | (<LETRAm>) ((<NUMERO>)*((<LETRAM>) | (<LETRAm>))* )*>
		|  	<LETRAM: ["A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"]  >
		|  	<LETRAm: ["a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"] >
}

TOKEN : /*Constantes */
{
		<CONSTANT_TURN: ":left "|":right "|":around ">
		<CONSTANT_FACE: ":north "|":south "|":east "|":west ">
		<CONSTANT_DIR: ":front "|":right "|":left "|":back " >
		<CONSTANT_DIRS: (":front "|":right "|":left "|":back ")(", :front "|", :right "|", :left "|", :back ")* >
}
	String command(StringBuffer sistema) :
	{	
		
		int x = null;
		String n = null;
		salida=new String();
		List<String> direcciones = new ArrayList<>();
		
	}
	
	{
		(

		   	"(" < ESPACIO >* <DEFVAR> < ESPACIO >* n=nombre() < ESPACIO >* x=numero() ")" {variablesYValores.put(n,x);salida = "Variable "+ n + " declarada con valor " + String.valueOf(x);return ",defvar";}  
		| 	"(" < ESPACIO >* <IGUAL> < ESPACIO >* n=nombreVariable() < ESPACIO >* x=numero() ")" {variablesYValores.put(n,x);salida = "Se reemplazó la variable "+ n + " con el valor " + String.valueOf(x);return ",igual";}
		| 	"(" < ESPACIO >* <MOVE> < ESPACIO >* (x=numero()|n=nombreVariable()) < ESPACIO >* ")" {if x != null { move(x);}
	    																							else if n != null { move(n); }return ",move";}  
		|   "(" < ESPACIO >* <TURN> < ESPACIO >* <CONSTANT_TURN> < ESPACIO >* ")" {turn(token.image);return ",turn";}			  			
		|   "(" < ESPACIO >* <FACE> < ESPACIO >* <CONSTANT_FACE> < ESPACIO >* ")" {face(token.image);return ",face";}	
	    |   "(" < ESPACIO >* <PUT> < ESPACIO >* objetoPoner() < ESPACIO >* ")" {world.popBalloons(x); salida = "Comando:  Put";return ",put";}
	    |   "(" < ESPACIO >* <PICK> < ESPACIO >* objetoRecoger() < ESPACIO >* ")" {world.pickBalloons(x); salida = "Comando:  Pick";return ",pick";}
	    |   "(" < ESPACIO >* <MOVE_DIR> < ESPACIO >* (x=numero()|n=nombreVariable()) < ESPACIO >* <CONSTANT_DIR> < ESPACIO >* ")"  {if x != null { move_dir(token.imagen, x); }
														   																		else if n != null { move_dir(token.image, n);}return ",move_dir";}
	    |   "(" < ESPACIO >* <RUN_DIRS> < ESPACIO >* "(" (direcciones=constant_dir(direcciones) < ESPACIO >*)+ ")" < ESPACIO >* ")" {run_dirs(direcciones);return ",run_dirs";}
	    |   "(" < ESPACIO >* <MOVE_FACE> < ESPACIO >* (x=numero()|n=nombreVariable()) < ESPACIO >* <CONSTANT_FACE> < ESPACIO >* ")"{if x != null { move_face(token.imagen, x);}
														    																		else if n != null { move_face(token.image, n);}return ",move_face";}
	    |   "(" < ESPACIO >* <SKIP> < ESPACIO >* ")" {return ",skip";}
		|   "(" < ESPACIO >* f=funcion() < ESPACIO >* (< NOMBRE >< ESPACIO >*)* < ESPACIO >* ")" {ejecutarFuncion(f, token.image);return ",funcion";}
		| 	< ESPACIO >* command()
		}

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

	ArrayList<>() constant_dir(ArrayList<>() direcciones):
	{}
	{
		<CONSTANT_DIR>
		{
			direcciones.add(token.image)
			return direcciones;
		}
	}

	//COMANDOS

	//MOVE
	void move(k):
	{
	for (i=1; i<=k; i++) { 
		if can_move_p {
		  world.moveForward(i);
		}
		else {
		  print("Hay un obstaculo");
		}
	}
	}
	{
	}

	
	//TURN
	void turn(c_turn):
	{
		if c_turn == ":right" {
			RobotWorld.turnRight();
		}
		else if c_turn == ":left" {
			RobotWorld.turnRight();
			RobotWorld.turnRight();
			RobotWorld.turnRight();
		}
		else if c_turn == ":around" {
			RobotWorld.turnRight();
			RobotWorld.turnRight();
		}
		else:
			print("Direccion no valida");
	}
	{
	}

	//FACE
	void face(c_face, k):
	{
		if c_face == ":north" {
		  	face_north(c_face);
		}
		else if c_face == ":south" {
			face_south(c_face);
		}
		else if c_face == ":east" {
			face_east(c_face);
		}
		else if c_face == ":west" {
			face_west(c_face);
		}
		else:
			print("Orientacion no valida")
	}
	{
	}

	//FACE NORTH
	void face_north(c_face):
	{
	  if RobotWorld.getFacing() == SOUTH {
	    RobotWorld.turnRight();
	    RobotWorld.turnRight();
	  	}
	  else if RobotWorld.getFacing() == EAST {
	    RobotWorld.turnRight();
	    RobotWorld.turnRight();
	    RobotWorld.turnRight();
	  	}
	  else if RobotWorld.getFacing() == WEST {
	    RobotWorld.turnRight();
	 	}
	}
	{
	}

	//FACE SOUTH
	void face_south(c_face):
	{
	  if RobotWorld.getFacing() == NORTH {
		  RobotWorld.turnRight();
	  	  RobotWorld.turnRight();
	  	}
	  else if RobotWorld.getFacing() == EAST {
	  	  RobotWorld.turnRight();
	  	    
	  	}
	  else if RobotWorld.getFacing() == WEST {
	  	  RobotWorld.turnRight();
	  	  RobotWorld.turnRight();
	  	  RobotWorld.turnRight();	  	
	  	}
	}
	{
	}

	//FACE EAST
	void face_east(c_face):
	{
	  if RobotWorld.getFacing() == NORTH {
		  RobotWorld.turnRight();  
		}
	  else if RobotWorld.getFacing() ==  SOUTH {
	  	  RobotWorld.turnRight();
	  	  RobotWorld.turnRight();
		  RobotWorld.turnRight();
	  	}
	  else if RobotWorld.getFacing() ==  WEST{
	  	  RobotWorld.turnRight();
		  RobotWorld.turnRight();
	  	}
	}
	{
	}

	//FACE WEST
	void face_west(c_face):
	{
	  if RobotWorld.getFacing() == NORTH {
		  RobotWorld.turnRight();
	  	  RobotWorld.turnRight();
		  RobotWorld.turnRight();
	  	}
	  else if RobotWorld.getFacing() == SOUTH {
	  	  RobotWorld.turnRight();
	  	  
	  	}
	  else if RobotWorld.getFacing() == EAST {
	  	  RobotWorld.turnRight();
		  RobotWorld.turnRight();
	  	}
	}
	{
	}

	//MOVE DIR
	void move_dir(c_dir, k):
	{
		if c_dir == ":right" {
		  	for (i=1; i<=k; i++) {
				RobotWorld.right();
			}
		}
		else if c_dir == ":left" {
		  	for (i=1; i<=k; i++) {
				RobotWorld.left();
			}
		}
		else if c_dir == ":front" {
		  	for (i=1; i<=k; i++) {
				RobotWorld.up();
			}
		}
		else if c_dir == ":back" {
		  	for (i=1; i<=k; i++) {
				RobotWorld.down();
			}
		}
		else:
			print("Direccion no valida");
	}
	{
	}

	//RUN DIRS
	void run_dirs(c_dirs):
	{
	  //FALTA QUITAR ESPACIOS
	  	List<String> list_dirs = Arrays.asList(c_dirs.split(", ", 0));
	  	for (int i = 0; i < list_dirs.size(); i++)
			if list_dirs[i] == ":right" {
			  	RobotWorld.right();
			}
			else if list_dirs[i] == ":left" {
			  	RobotWorld.left();
			}
			else if list_dirs[i] == ":front" {
			  	RobotWorld.up();
			}
			else if list_dirs[i] == ":back" {
			  	RobotWorld.down();
			}
			else:
				print("Direccion no valida");
	}
	{
	}

	//MOVE FACE
	void move_face(c_face, k):
	{
	  	boolean bien = true;
		if c_face == ":north" {
		  	face_north(c_face)
		}
		else if c_face == ":south" {
			face_south(c_face)
		}
		else if c_face == ":east" {
			face_east(c_face) 
		}
		else if c_face == ":west" {
			face_west(c_face)
		}
		else:
			print("Orientacion no valida");
			paila = false;
			
		if paila { 
			for (i=1; i<=k; i++) { 
				if can_move_p {
				  world.moveForward(i);
				}
				else {
			  		print("Hay un obstaculo");
				}
			}
		}
	}
	{
	}
	
	//FUNCION
	String funcion():
	{}
	{
	  < NOMBRE >
	  {
	    for (i=0;i<tablaFunciones.size();i++) {
			if (tablaFunciones.get(i) == token.image) {
			  	return tablaFunciones.get(i)
			}
		 return "Error"
		 }
	  }
	}
	
	
	//EJECUTAR FUNCION
	void ejecutarFuncion(nombreFuncion, parametros):
	{
	  	List<String> lista_parametros = Arrays.asList(parametros.split(" ", 0));
		int numparametrosf = lista_parametros.size();
		Map dicFuncion = tablaFunciones.get(nombreFuncion);
		int numparametros = dicFuncion.get("numparametros");
		if numparametrosf == numparametros
		{
	  		bloque()
		  //	String inst = dicFuncion.get("bloque");
		  //	String[] instrucciones = inst.split(",");
		  //	while i<instrucciones.size()
		  //	{
		  //	  if instrucciones[i]=="defvar":
		  //	  	variablesYValores.put(n,x);
		  //	}
		}
	}
	{
	}
	
	
	//ESTRUCTURAS
	String structure(StringBuffer sistema) :
	{	
		int x = null;
		String n = null;
		int num = 0;
		salida=new String();
	}
	
	{
		(

		   	"(" < ESPACIO >* <IF> < ESPACIO >* x=condition() < ESPACIO >* y=bloque() < ESPACIO >* z=bloque() < ESPACIO >* ")"
		   	{
		   	  if x==true
		   	  {
		   	   bloque() 
		   	  }
		   	  else
		   	  {
		   	   bloque() 
		   	  }
		   	  return ",if";
		   	}  
		| 	"(" < ESPACIO >* <LOOP> < ESPACIO >*  x=condition() < ESPACIO >* bloque() < ESPACIO >* ")"
			{
		   	  while x==true
		   	  {
		   	   bloque();
		   	   x=condition();
		  	  }
		  	  return ",loop";
		   	}  
		| 	"(" < ESPACIO >* <REPEAT> < ESPACIO >* (x=numero()|n=nombreVariable()) < ESPACIO >* bloque() < ESPACIO >* ")" {}  
			{
			  if x != null
				  {
				    num=x;
				  }
			  else if n != null
				  {
				    num=variablesYValores.get(n);
				  }
			  int i = 0;
		   	  while i<num
		   	  {
		   	   bloque();
		   	   i++;
		  	  }
		  	  return ",repeat";
		   	}  
		|   "(" < ESPACIO >* <DEFUN> < ESPACIO >* (<NOMBRE>)* < ESPACIO >* "(" (<NOMBRE>< ESPACIO >*)* < ESPACIO >* ")"< ESPACIO >* b=bloque() < ESPACIO >* ")"
			{
			  crear_funcion(n, token.image, b);
			  return ",defun";
		   	}  
		| < ESPACIO >* structure()
		) 

		
	}


	//CREAR FUNCION
	void crear_funcion(nombreFuncion, parametros, bloque):
	{
	  	List<String> lista_parametros = Arrays.asList(c_dirs.split(" ", 0));
	  	Map<String,?> dicFuncion = new Map<String,?>();
	  	dicFuncion.put("numparametros", lista_parametros.size());
	  	dicFuncion.put("bloque", bloque);
		tablaFunciones.put(nombreFuncion, dicFuncion);
	}
	{
	}
	
	//BLOQUE
	String bloque(StringBuffer sistema):
	{
		String instrucciones = "";
	}
	{
	  (
	      "(" s=structure() ")" {instrucciones = instrucciones + s;}  
		| "(" s=command() ")" {instrucciones = instrucciones + s;}	  )+
	
	  {
		return instrucciones;
	  }
	}
	
	//CONDICIONES
	String condition(StringBuffer sistema) :
	{	
		int x = null;
		String n = null;
		int num = 0;
		salida=new String();
	}

	{
		(
		   	"(" < ESPACIO >* <FACING_P> < ESPACIO >* <CONSTANT_FACE> < ESPACIO >* ")"
		   	{
			facing_p();
			return ",facing_p";
		    }  
		| 	"(" < ESPACIO >* <CAN_PUT_P> < ESPACIO >* (<T_BALLOONS>|<T_CHIPS>) < ESPACIO >* (x=numero()|n=nombreVariable()) < ESPACIO >* ")"
			{
			  can_put_p();
			  return ",can_put_p";
			 }
		| 	"(" < ESPACIO >* <CAN_PICK_P> < ESPACIO >* (<T_BALLOONS>|<T_CHIPS>) < ESPACIO >* (x=numero()|n=nombreVariable()) < ESPACIO >* ")"
			{
			  can_pick_p();
			  return ",can_pick_p";
			 }
		|   "(" < ESPACIO >* <CAN_MOVE_P> < ESPACIO >* <CONSTANT_FACE> < ESPACIO >* ")"
			{
			  can_move_p();
			  return ",can_pick_p";
			}  
		|   "(" < ESPACIO >* <NOT> < ESPACIO >* condition() < ESPACIO >* ")" {return ",not";}  
		|	"("< ESPACIO >* ")"
		|   "(" < ESPACIO >* f=funcion() < ESPACIO >* (< NOMBRE >< ESPACIO >*)* < ESPACIO >* ")" {ejecutarFuncion(f, token.image);return ",funcion";}
		| 	< ESPACIO >* condition()
			{
		  }

		) 

	}

	boolean facing_p():
	{
		  resp=false;
		  if RobotWorld.getFacing()==token.image
	  	  {
			resp= true;
		  }
		  else
		  {
		    resp false;
		  }
		  return resp;
	}
	{}

	
	boolean can_put_p():
		{
		  resp=false
		  if x != null
		  {
		    num=x;
		  }
		  else if n != null
		  {
		    num=variablesYValores.get(n);
		  }
		  if num==0 || ("BALLOONS"==token.image && RobotWorld.getMyBalloons()<=(num) && RobotWorld.chipExists()==false) || ("CHIPS"==token.image && RobotWorldDec.freeSpacesForChips()>num && RobotWorld.getMyChips<=(num) && RobotWorld.chipExists()==false)
		  {
		    resp= true;
		  }
		  else
		  {
		  	resp= false;
		  }
		  return resp;
		}
		{}
		
	boolean can_pick_p():
		{
		  resp=false;
		  if x != null
		  {
		    num=x;
		  }
		  else if n != null
		  {
		    num=variablesYValores.get(n);
		  }
		  if num==0 || ("BALLOONS"==token.image && RobotWorld.countBalloons()>=(num)) || ("CHIPS"==token.image && RobotWorld.chipsToPick()>num && RobotWorld.chipExists()==true)
		  {
		    resp= true;
		  }
		  else
		  {
		  	resp= false;
		  }
		  return resp;
		}
		{}
			  
	boolean can_move_p():
		{
		  p=RobotWorld.getPosition();
		  resp=true;
		  if token.image==":north"
		  {
		    if RobotWorld.isBlocked(p.x,p.y-1)
		    {
		      resp= false;
		    }
		  }
		  else if token.image==":south"
		  {
		    if RobotWorld.isBlocked(p.x,p.y+1)
		    {
		      resp= false;
		    }
		  }
		  else if token.image==":west"
		  {
		    if RobotWorld.isBlocked(p.x-1,p.y)
		    {
		      resp= false;
		    }
		  }
		  else if token.image==":east"
		  {
		    if RobotWorld.isBlocked(p.x+1,p.y)
		    {
		      resp= false;
		    }
		  }
		  return resp;
		}
		{}
		
	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS> < ESPACIO >*   ","< ESPACIO >* f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <T_BALLOONS> < ESPACIO >*  ","< ESPACIO >* f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS> < ESPACIO >*  "," < ESPACIO >* f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <T_BALLOONS> < ESPACIO >* "," < ESPACIO >* f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */


	String nombre():
	{
	  String nombre="";
	}
	{
	  <NOMBRE>
	  {
	    return nombre;
	  }
	}

	
	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	